<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vscode配置latex环境</title>
      <link href="/2022/10/07/vscode%E9%85%8D%E7%BD%AElatex%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/10/07/vscode%E9%85%8D%E7%BD%AElatex%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="下载tex-live"><a class="markdownIt-Anchor" href="#下载tex-live"></a> 下载TeX Live</h2><p>官网链接为：<a href="https://tug.org/texlive/">https://tug.org/texlive/</a></p><h2 id="下载vscode以及插件"><a class="markdownIt-Anchor" href="#下载vscode以及插件"></a> 下载Vscode以及插件</h2><ul><li><p>vscode官网下载即可</p></li><li><p>推荐下载LaTeX Workshop插件</p></li></ul><h2 id="设置latex-workshop插件"><a class="markdownIt-Anchor" href="#设置latex-workshop插件"></a> 设置LaTeX Workshop插件</h2><ul><li><p>点击插件右下角小齿轮，然后打开Extension Setting，即可对插件进行设置<br /><img src="https://raw.githubusercontent.com/JawsonGuam/PicBed/main/img/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20221007161619.png" alt="20221007161619" /><br /><img src="https://raw.githubusercontent.com/JawsonGuam/PicBed/main/img/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20221007161658.png" alt="20221007161658" /></p></li><li><p>我们主要添加了以下设置，（既可在GUI中设置，又可以在.json文件中修改，它们是保持同步的），接下来对这些设置进行解读</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.recipe.default&quot;: &quot;lastUsed&quot;,</span><br><span class="line">&quot;latex-workshop.latex.autoBuild.run&quot;: &quot;onSave&quot;,</span><br><span class="line">&quot;latex-workshop.message.error.show&quot;: false,</span><br><span class="line">&quot;latex-workshop.message.warning.show&quot;: false,</span><br><span class="line">&quot;latex-workshop.showContextMenu&quot;: true,</span><br><span class="line">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;: &quot;double-click&quot;,</span><br><span class="line">&quot;latex-workshop.view.pdf.viewer&quot;: &quot;browser&quot;,</span><br><span class="line">&quot;latex-workshop.latex.autoClean.run&quot;: &quot;onBuilt&quot;,</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.recipe.default&quot;: &quot;lastUsed&quot;</span><br></pre></td></tr></table></figure><p>此项设置是设置编译的默认选项，笔者认为使用上一次的编译顺序较为方便，只需在最开始的时候选择编译方法就可以了，故设置为&quot;lastUsed&quot;</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.autoBuild.run&quot;: &quot;onSave&quot;</span><br></pre></td></tr></table></figure><p>此项设置的功能为在什么行为后自动编译latex文件，笔者设置为&quot;onSave&quot;，使之在每次修改保存后都自动编译，（笔者之前习惯使用overleaf，这样设置就与overleaf一致了）</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.message.error.show&quot;: false</span><br><span class="line">&quot;latex-workshop.message.warning.show&quot;: false</span><br></pre></td></tr></table></figure><p>这两个命令是设置当文档编译错误时是否弹出显示出错和警告的弹窗。因为这些错误和警告信息能够从终端中获取，且弹窗弹出比较烦人，故而笔者设置均设置为false</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.showContextMenu&quot;: true</span><br></pre></td></tr></table></figure><p>此设置可启用上下文LaTeX菜单，设置为true时，右键文档可多出两个选项，其中多出来的第一个选项为进行tex文件的编译，而第二个选项为进行正向同步，即从代码定位到编译出来的 pdf 文件相应位置<br /><img src="https://raw.githubusercontent.com/JawsonGuam/PicBed/main/img/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20221007163459.png" alt="20221007163459" /></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.view.pdf.internal.synctex.keybinding&quot;: &quot;double-click&quot;</span><br></pre></td></tr></table></figure><p>此设置为快捷键设置，用于设置反向同步（即从编译出的 pdf 文件指定位置跳转到 tex 文件中相应代码所在位置）的内部查看器的快捷键，也就是说，使用鼠标双击pdf某文本处就可以跳到tex文件对应的代码处</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.view.pdf.viewer&quot;: &quot;browser&quot;</span><br></pre></td></tr></table></figure><p>此项设置将pdf的预览方式设置为浏览器</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latex.autoClean.run&quot;: &quot;onBuilt&quot;</span><br></pre></td></tr></table></figure><p>这条命令是设置什么时候对编译过程中形成的辅助文件进行清除，笔者设置为每次build之后都清楚辅助文件</p></li><li><p>对于以上设置，均可以在GUI中看到其他的选择项，可自行选择</p></li></ul><h2 id="latex文件编写记录"><a class="markdownIt-Anchor" href="#latex文件编写记录"></a> latex文件编写记录</h2><ul><li><p>当我们打开一个.tex文件，侧边栏就会出现TEX插件<br /><img src="https://raw.githubusercontent.com/JawsonGuam/PicBed/main/img/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20221007164514.png" alt="20221007164514" /></p></li><li><p>我们可以选择一个编译方法对我们的.tex文件进行编译，对于英文论文建议使用latexmk，当然也建议使用传统的pdflatex + bibtex + pdflatex进行编译，防止我们使用了中文等违规字符，对于中文论文建议使用latexmk(xelatex)</p></li><li><p>编译完成后可以点击左侧的View LaTeX PDF来选择预览pdf的方式，也可以直接点右上角预览pdf（默认浏览器打开）</p></li><li><p>在.tex文件中某处右键，选择SyncTeX from cursor，便可自动定位到pdf的对应位置，在pdf某处双击，便可自动定位到.tex文件对应位置</p></li></ul><hr /><p>到此，Latex编写环境就配置完成了，开始愉快地写论文吧~</p>]]></content>
      
      
      <categories>
          
          <category> 过程记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2022/09/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本文记录了搭建个人博客的全过程，本人需要的是一个记录学习笔记的博客，期望能拥有舒适的阅读体验，故所设计的博客风格较为简约。同时本文记录的博客建立过程省去了许多网上提供了但本人觉得没必要的步骤，操作起来较简单。</p><hr /><h2 id="搭建博客的准备工作"><a class="markdownIt-Anchor" href="#搭建博客的准备工作"></a> 搭建博客的准备工作</h2><h3 id="建立github仓库"><a class="markdownIt-Anchor" href="#建立github仓库"></a> 建立Github仓库</h3><ol><li><p>注册Github账号</p></li><li><p>进入主页的repositories一栏，点击<strong>New</strong>，建立新仓库<br /><img src="https://raw.githubusercontent.com/JawsonGuam/PicBed/main/img/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20220921103435.png" alt="20220921103435" /></p></li><li><p>需要建立的第一个仓库为保存博客的仓库，注意仓库名必须为<strong>Github用户名</strong>带上后缀 .github.io，在此仓库中保存着我们的网站文件，且省去了申请域名的麻烦，可直接通过访问<a href="https://xn--Github-8h6jw94g4v9a.github.io/">https://Github用户名.github.io/</a>来访问我们的博客网站</p></li><li><p>需要建立的第二个仓库为<strong>图床</strong>，即保存博客中图片的仓库，在我们博客中所上传的所有图片均保存在此</p></li></ol><h3 id="配置博客编写环境"><a class="markdownIt-Anchor" href="#配置博客编写环境"></a> 配置博客编写环境</h3><ol><li><p>Markdown的编写建议在<strong>VSCode</strong>中进行，该软件生态较好，有许多实用插件可供使用，要编写Markdown只需要下载<strong>Markdown Preview Enhance</strong>插件即可</p></li><li><p>推荐一个VSCode插件<strong>PicGo</strong>，可自动将剪切板中的图片复制到Markdown的同时将图片上传到图床中</p></li></ol><ul><li><p>需要在插件的设置中进行以下设置：<br /><img src="https://raw.githubusercontent.com/JawsonGuam/PicBed/main/img/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/20220921105101.png" alt="20220921105101" /></p></li><li><p>注意Path的设置建议每写一篇博客就换一个与博客标题相同的文件夹来存放图片</p></li><li><p>该插件的使用需要生成自己Github的Token以便该插件上传图片，申请过程为：<strong>点击右上角个人头像-Settings-左边栏中Developer settings-Personal access tokens-Generate new token</strong></p></li><li><p>建议申请一个无限期的token，因为即使是无限期我们也随时可以将该token停掉，然后将token复制输入到PicGo插件的设置里即可</p></li></ul><h3 id="安装git-nodejs以及hexo"><a class="markdownIt-Anchor" href="#安装git-nodejs以及hexo"></a> 安装Git、nodejs以及Hexo</h3><ol><li><p>首先介绍一下Hexo，它是一个<strong>快速, 简洁且高效的博客框架</strong>，拥有强大的插件系统，我们只需在该框架中进行直观、简单的修改即可达到设计自己的博客的目的</p></li><li><p>其次介绍下<strong>Git源码管理工具</strong>, Git可对网站进行自动部署，同时也提供了hexo等命令方便网站部署，去官网下载安装即可</p></li><li><p>最后介绍一下Node.js，<strong>Node.js是一个让JavaScript运行在服务端的开发平台</strong>，用于方便地搭建响应速度快、易于扩展的网络应用</p></li><li><p>Hexo是基于node.js的, 所以我们在安装它之前需要用到npm安装工具, 这个工具是 node.js 安装包的工具, 所以, 我们先要安装 node.js。建议直接装C盘，如果想装在D盘，<strong>需要配置一下环境变量</strong>以便npm在安装全局模块时的路径也在D盘，我借鉴了这位博主的方法：<a href="https://zhuanlan.zhihu.com/p/105715224">https://zhuanlan.zhihu.com/p/105715224</a></p></li><li><p>接下来安装Hexo，首先建立我们的博客网站本地文件夹Blog，然后<strong>在该文件夹中以管理员身份运行Git Bash</strong>，输入npm命令安装Hexo</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="部署基于hexo的博客网站"><a class="markdownIt-Anchor" href="#部署基于hexo的博客网站"></a> 部署基于Hexo的博客网站</h3><ul><li>进入已下载了Hexo的Blog文件夹，以管理员身份运行Git Bash，输入以下命令初始化博客</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>输入以下命令生成网站静态文件到默认的public文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ul><li>输入以下命令在本地服务器预览网页，查看结束后按<code>Ctrl C</code>退出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>打开Blog文件夹中的 <strong>_config.yml</strong>文件，在代码底部加上如下内容，然后在Git中输入命令<code>hexo d</code>便可将网页自动部署到Github</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">https://github.com/JawsonGuam/JawsonGuam.github.io.git</span> <span class="comment">#你的仓库地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><hr /><h2 id="博客主题设置"><a class="markdownIt-Anchor" href="#博客主题设置"></a> 博客主题设置</h2><h3 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h3><ul><li>进入Blog文件夹，以管理员身份运行Git Bash，输入以下命令将主题下载到themes目录</li></ul><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><ul><li>修改Blog中的 _config.yml文件，将其中 theme 参数改为 butterfly</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><blockquote><p>注意butterfly文件夹中也有_config.yml文件，而我们修改的是Blog中的_config.yml文件不要搞错了</p></blockquote><h3 id="安装渲染器"><a class="markdownIt-Anchor" href="#安装渲染器"></a> 安装渲染器</h3><p>我们需要渲染工具支持katex，以便我们在Markdown编写数学公式</p><ul><li>首先卸载旧渲染器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><ul><li>安装新渲染器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><ul><li>安装其他渲染工具</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure><ul><li>修改Butterfly中的 _config.yml文件，将对应代码设置如下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KaTeX</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>由于per_page我们设置为false，所以每篇博客如用到公式了则就要设置为true，那么如何每篇博客均独自设置呢，我们需要在scaffolds\post.md也就是博客文章的模板文件中加上<code>katex: false</code>，这样每篇博客在建立时都会有这个设置选项</li></ul><h3 id="主题细节设置"><a class="markdownIt-Anchor" href="#主题细节设置"></a> 主题细节设置</h3><ul><li>博客右上角菜单栏设置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line"><span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line"><span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line"><span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><ul><li>代码块主题</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><ul><li>网站图标</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/img/3232.png</span></span><br></pre></td></tr></table></figure><ul><li>头像</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>侧边栏设置<br />本人只在侧边栏留了分类一栏，因为分类可供读者最直接地找出所需要的文章</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">0</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br></pre></td></tr></table></figure><hr /><h2 id="博客的书写"><a class="markdownIt-Anchor" href="#博客的书写"></a> 博客的书写</h2><p>在完成上述所有的准备工作后，就可以开始写博客了</p><h3 id="准备博客模板"><a class="markdownIt-Anchor" href="#准备博客模板"></a> 准备博客模板</h3><ul><li><p>打开Blog中的scaffolds文件夹，里面的post.md就是我们的文章模板</p></li><li><p>模板中password、katex、tags、categories要注意一下password是文章的密码，katex是文章中是否使用公式渲染，tags是文章的标签，categories是文章的分类</p></li></ul><h3 id="部署博客"><a class="markdownIt-Anchor" href="#部署博客"></a> 部署博客</h3><ul><li>新建博客时，先定位到Blog文件夹，在Git Bash中输入以下指令，则在Blog\source\_posts中就会按照博客模板生成一个markdown文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n 博客标题</span><br></pre></td></tr></table></figure><ul><li>部署博客到网页上时，需要以下三步指令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>到此，一篇博客就成功地部署到自己的网页上了。</p>]]></content>
      
      
      <categories>
          
          <category> 过程记录 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
